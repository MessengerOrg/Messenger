// <auto-generated />
using System;
using Messenger.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Messenger.Services.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230316164149_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Messenger.Domain.Entities.AttachmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.BanUserByChatEntity", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BanDateOfExpire")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BanUserByChats");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.ChatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarLink")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LastMessageId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2975dbfe-bc05-4962-ba85-e4d1b4e8f7a8"),
                            Name = "DotNetRuChat",
                            OwnerId = new Guid("5aef3c7f-8040-4a99-9a3d-388695e55763"),
                            Title = "DotNetRuChat",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("2b56ee19-fe9c-4fab-884b-ff7d85a9f337"),
                            Name = "dotnettalks",
                            OwnerId = new Guid("ee677bde-c6e6-40b3-8294-5fb5e913202a"),
                            Title = ".NET Talks",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("f69acb05-018c-4626-9e70-46fbb5dfde6f"),
                            Type = 0
                        });
                });

            modelBuilder.Entity("Messenger.Domain.Entities.ChatUserEntity", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanSendMedia")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("MuteDateOfExpire")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatUsers");

                    b.HasData(
                        new
                        {
                            ChatId = new Guid("2975dbfe-bc05-4962-ba85-e4d1b4e8f7a8"),
                            UserId = new Guid("5aef3c7f-8040-4a99-9a3d-388695e55763"),
                            CanSendMedia = true
                        },
                        new
                        {
                            ChatId = new Guid("2975dbfe-bc05-4962-ba85-e4d1b4e8f7a8"),
                            UserId = new Guid("ee677bde-c6e6-40b3-8294-5fb5e913202a"),
                            CanSendMedia = true
                        },
                        new
                        {
                            ChatId = new Guid("2975dbfe-bc05-4962-ba85-e4d1b4e8f7a8"),
                            UserId = new Guid("a85825ba-f99b-4177-a858-96384303ea14"),
                            CanSendMedia = true
                        },
                        new
                        {
                            ChatId = new Guid("2975dbfe-bc05-4962-ba85-e4d1b4e8f7a8"),
                            UserId = new Guid("9f40e295-8b43-4329-b37e-d267deee6c4a"),
                            CanSendMedia = true
                        },
                        new
                        {
                            ChatId = new Guid("2b56ee19-fe9c-4fab-884b-ff7d85a9f337"),
                            UserId = new Guid("9f40e295-8b43-4329-b37e-d267deee6c4a"),
                            CanSendMedia = true
                        },
                        new
                        {
                            ChatId = new Guid("2b56ee19-fe9c-4fab-884b-ff7d85a9f337"),
                            UserId = new Guid("ee677bde-c6e6-40b3-8294-5fb5e913202a"),
                            CanSendMedia = true
                        },
                        new
                        {
                            ChatId = new Guid("2b56ee19-fe9c-4fab-884b-ff7d85a9f337"),
                            UserId = new Guid("a85825ba-f99b-4177-a858-96384303ea14"),
                            CanSendMedia = true
                        },
                        new
                        {
                            ChatId = new Guid("f69acb05-018c-4626-9e70-46fbb5dfde6f"),
                            UserId = new Guid("ee677bde-c6e6-40b3-8294-5fb5e913202a"),
                            CanSendMedia = true
                        },
                        new
                        {
                            ChatId = new Guid("f69acb05-018c-4626-9e70-46fbb5dfde6f"),
                            UserId = new Guid("5aef3c7f-8040-4a99-9a3d-388695e55763"),
                            CanSendMedia = true
                        });
                });

            modelBuilder.Entity("Messenger.Domain.Entities.DeletedDialogByUserEntity", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DeletedDialogByUsers");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.DeletedMessageByUserEntity", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("MessageId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DeletedMessageByUsers");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReplyToMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReplyToMessageId")
                        .IsUnique();

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f6d7947-488d-4e7c-be7e-bfbf04bfef6f"),
                            ChatId = new Guid("2975dbfe-bc05-4962-ba85-e4d1b4e8f7a8"),
                            DateOfCreate = new DateTime(2023, 3, 16, 16, 41, 48, 727, DateTimeKind.Utc).AddTicks(4520),
                            IsEdit = false,
                            OwnerId = new Guid("a85825ba-f99b-4177-a858-96384303ea14"),
                            Text = "привет, какие книжки почитать?"
                        },
                        new
                        {
                            Id = new Guid("d4b826c1-5f1c-4ae6-ac2a-8ee7b5b75e8a"),
                            ChatId = new Guid("2975dbfe-bc05-4962-ba85-e4d1b4e8f7a8"),
                            DateOfCreate = new DateTime(2023, 3, 16, 16, 41, 48, 727, DateTimeKind.Utc).AddTicks(5787),
                            IsEdit = false,
                            OwnerId = new Guid("5aef3c7f-8040-4a99-9a3d-388695e55763"),
                            ReplyToMessageId = new Guid("6f6d7947-488d-4e7c-be7e-bfbf04bfef6f"),
                            Text = "Книги в айтишке это как предметы в школе, созданы что б отбить у тебя желание учиться..."
                        },
                        new
                        {
                            Id = new Guid("5e162143-381e-4b77-b4fd-f5f028844eb5"),
                            ChatId = new Guid("2975dbfe-bc05-4962-ba85-e4d1b4e8f7a8"),
                            DateOfCreate = new DateTime(2023, 3, 16, 16, 41, 48, 727, DateTimeKind.Utc).AddTicks(6339),
                            IsEdit = false,
                            OwnerId = new Guid("ee677bde-c6e6-40b3-8294-5fb5e913202a"),
                            ReplyToMessageId = new Guid("d4b826c1-5f1c-4ae6-ac2a-8ee7b5b75e8a"),
                            Text = "ладно"
                        },
                        new
                        {
                            Id = new Guid("ab52cc53-2afd-49df-b2c4-345851bcbee1"),
                            ChatId = new Guid("2975dbfe-bc05-4962-ba85-e4d1b4e8f7a8"),
                            DateOfCreate = new DateTime(2023, 3, 16, 16, 41, 48, 727, DateTimeKind.Utc).AddTicks(6862),
                            IsEdit = false,
                            OwnerId = new Guid("5aef3c7f-8040-4a99-9a3d-388695e55763"),
                            Text = "ага"
                        },
                        new
                        {
                            Id = new Guid("b1f3e620-7d31-46f0-ab07-791829539bf8"),
                            ChatId = new Guid("f69acb05-018c-4626-9e70-46fbb5dfde6f"),
                            DateOfCreate = new DateTime(2023, 3, 16, 16, 41, 48, 727, DateTimeKind.Utc).AddTicks(7512),
                            IsEdit = false,
                            OwnerId = new Guid("5aef3c7f-8040-4a99-9a3d-388695e55763"),
                            Text = "привет"
                        },
                        new
                        {
                            Id = new Guid("a1077a79-a662-4e44-8ece-c9ce64c5a2d0"),
                            ChatId = new Guid("f69acb05-018c-4626-9e70-46fbb5dfde6f"),
                            DateOfCreate = new DateTime(2023, 3, 16, 16, 41, 48, 727, DateTimeKind.Utc).AddTicks(8026),
                            IsEdit = false,
                            OwnerId = new Guid("5aef3c7f-8040-4a99-9a3d-388695e55763"),
                            Text = "привет, как дела?"
                        });
                });

            modelBuilder.Entity("Messenger.Domain.Entities.RoleUserByChatEntity", b =>
                {
                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanAddAndRemoveUserToConversation")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanBanUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanChangeChatData")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanGivePermissionToUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleColor")
                        .HasColumnType("integer");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUserByChats");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.SessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarLink")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5aef3c7f-8040-4a99-9a3d-388695e55763"),
                            Bio = "the best account",
                            DisplayName = "kami no me",
                            Nickname = "kaminome",
                            PasswordHash = "gzF/n+F8YPd/IvNrALE/XtGhhoJhtRs+PP3eco6JYzB36pVy2TGyj/4+68GXGws4EiIjSAkPKutdJuj6tb0d7A==",
                            PasswordSalt = "fh1cbqngj2gJnAoolbwi6e6tPVGwUnrLVsCX1l7UbD+Nxz72Y8F4ucWNaBa0kLopPAyFWHesvCfZX7OSlqG3ZVAjYTUIa+YCV3TXwgNnQARH0KptctnRHczMzlk5D0bmHra29Zc3rGkWpsxtVGhuayb/FIUGPG92Md0G8d6v2GI="
                        },
                        new
                        {
                            Id = new Guid("ee677bde-c6e6-40b3-8294-5fb5e913202a"),
                            Bio = "cool status",
                            DisplayName = "alice1",
                            Nickname = "alice1234",
                            PasswordHash = "gzF/n+F8YPd/IvNrALE/XtGhhoJhtRs+PP3eco6JYzB36pVy2TGyj/4+68GXGws4EiIjSAkPKutdJuj6tb0d7A==",
                            PasswordSalt = "fh1cbqngj2gJnAoolbwi6e6tPVGwUnrLVsCX1l7UbD+Nxz72Y8F4ucWNaBa0kLopPAyFWHesvCfZX7OSlqG3ZVAjYTUIa+YCV3TXwgNnQARH0KptctnRHczMzlk5D0bmHra29Zc3rGkWpsxtVGhuayb/FIUGPG92Md0G8d6v2GI="
                        },
                        new
                        {
                            Id = new Guid("a85825ba-f99b-4177-a858-96384303ea14"),
                            Bio = "I'm Bob",
                            DisplayName = "bob1",
                            Nickname = "bob1234",
                            PasswordHash = "gzF/n+F8YPd/IvNrALE/XtGhhoJhtRs+PP3eco6JYzB36pVy2TGyj/4+68GXGws4EiIjSAkPKutdJuj6tb0d7A==",
                            PasswordSalt = "fh1cbqngj2gJnAoolbwi6e6tPVGwUnrLVsCX1l7UbD+Nxz72Y8F4ucWNaBa0kLopPAyFWHesvCfZX7OSlqG3ZVAjYTUIa+YCV3TXwgNnQARH0KptctnRHczMzlk5D0bmHra29Zc3rGkWpsxtVGhuayb/FIUGPG92Md0G8d6v2GI="
                        },
                        new
                        {
                            Id = new Guid("9f40e295-8b43-4329-b37e-d267deee6c4a"),
                            Bio = "why alex?",
                            DisplayName = "alex1",
                            Nickname = "alex1234",
                            PasswordHash = "gzF/n+F8YPd/IvNrALE/XtGhhoJhtRs+PP3eco6JYzB36pVy2TGyj/4+68GXGws4EiIjSAkPKutdJuj6tb0d7A==",
                            PasswordSalt = "fh1cbqngj2gJnAoolbwi6e6tPVGwUnrLVsCX1l7UbD+Nxz72Y8F4ucWNaBa0kLopPAyFWHesvCfZX7OSlqG3ZVAjYTUIa+YCV3TXwgNnQARH0KptctnRHczMzlk5D0bmHra29Zc3rGkWpsxtVGhuayb/FIUGPG92Md0G8d6v2GI="
                        });
                });

            modelBuilder.Entity("Messenger.Domain.Entities.AttachmentEntity", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.MessageEntity", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.BanUserByChatEntity", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("BanUserByChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.UserEntity", "User")
                        .WithMany("BanUserByChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.ChatEntity", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.MessageEntity", "LastMessage")
                        .WithOne("LastMessageByChat")
                        .HasForeignKey("Messenger.Domain.Entities.ChatEntity", "LastMessageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Messenger.Domain.Entities.UserEntity", "Owner")
                        .WithMany("Chats")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LastMessage");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.ChatUserEntity", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.UserEntity", "User")
                        .WithMany("ChatUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.DeletedDialogByUserEntity", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("DeletedDialogByUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.UserEntity", "User")
                        .WithMany("DeletedDialogByUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.DeletedMessageByUserEntity", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.MessageEntity", "Message")
                        .WithMany("DeletedMessageByUsers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.UserEntity", "User")
                        .WithMany("DeletedMessageByUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.MessageEntity", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.UserEntity", "Owner")
                        .WithMany("Messages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Messenger.Domain.Entities.MessageEntity", "ReplyToMessage")
                        .WithOne()
                        .HasForeignKey("Messenger.Domain.Entities.MessageEntity", "ReplyToMessageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Chat");

                    b.Navigation("Owner");

                    b.Navigation("ReplyToMessage");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.RoleUserByChatEntity", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.Entities.ChatUserEntity", "ChatUser")
                        .WithOne("Role")
                        .HasForeignKey("Messenger.Domain.Entities.RoleUserByChatEntity", "ChatId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.SessionEntity", b =>
                {
                    b.HasOne("Messenger.Domain.Entities.UserEntity", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.ChatEntity", b =>
                {
                    b.Navigation("BanUserByChats");

                    b.Navigation("ChatUsers");

                    b.Navigation("DeletedDialogByUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.ChatUserEntity", b =>
                {
                    b.Navigation("Role");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.MessageEntity", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("DeletedMessageByUsers");

                    b.Navigation("LastMessageByChat");
                });

            modelBuilder.Entity("Messenger.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("BanUserByChats");

                    b.Navigation("ChatUsers");

                    b.Navigation("Chats");

                    b.Navigation("DeletedDialogByUsers");

                    b.Navigation("DeletedMessageByUsers");

                    b.Navigation("Messages");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
